{"version":3,"sources":["../src/index.ts","../src/bots/actionBot.ts","../src/utils/logger.ts","../src/bots/cronBot.ts","../src/bots/keywordBot.ts","../src/utils/websocketClient.ts","../src/utils/jetstreamSubscription.ts","../src/utils/strings.ts","../src/utils/wsToFeed.ts"],"sourcesContent":["export * from \"./types/bot\"\nexport * from \"./types/message\"\nexport * from \"./types/post\"\nexport * from \"./bots/actionBot\"\nexport * from \"./bots/cronBot\"\nexport * from \"./bots/keywordBot\"\nexport * from \"./utils/jetstreamSubscription\"\nexport * from \"./utils/logger\"\nexport * from \"./utils/strings\"\nexport * from \"./utils/websocketClient\"\nexport * from \"./utils/wsToFeed\"\n","import { AtpAgent, AtpAgentOptions } from '@atproto/api';\nimport { Logger } from '../utils/logger';\nimport type { ActionBot } from '../types/bot';\n\nexport class ActionBotAgent extends AtpAgent {\n  constructor(public opts: AtpAgentOptions, public actionBot: ActionBot) {\n    super(opts);\n  }\n\n  async doAction(params:any): Promise<void> {\n    this.actionBot.action(this, params);\n  }\n}\n\nexport const useActionBotAgent = async (actionBot: ActionBot): Promise<ActionBotAgent | null> => {\n  const agent = new ActionBotAgent({ service: actionBot.service }, actionBot);\n  \n  try {\n    Logger.info(`Initialize action bot ${actionBot.username ?? actionBot.identifier}`);\n    const login = await agent.login({ identifier: actionBot.identifier, password: actionBot.password! });\n    if (!login.success) {\n      Logger.warn(`Failed to login action bot ${actionBot.username ?? actionBot.identifier}`);\n      return null;\n    }\n    return agent;\n  } catch (error) {\n    Logger.error(\"Failed to initialize action bot:\", `${error}, ${actionBot.username ?? actionBot.identifier}`);\n    return null;\n  }\n};","/**\n * A simple logging utility class providing static methods for various log levels.\n * Each log message is prefixed with a timestamp and log level.\n */\nexport class Logger {\n    /**\n     * Logs an informational message to the console.\n     *\n     * @param message - The message to be logged.\n     * @param context - Optional additional context (object or string) to log alongside the message.\n     */\n    static info(message: string, context?: object | string) {\n        console.info(`${new Date().toLocaleString()} [INFO]: ${message}`, context || '');\n    }\n\n    /**\n     * Logs a warning message to the console.\n     *\n     * @param message - The message to be logged.\n     * @param context - Optional additional context (object or string) to log alongside the message.\n     */\n    static warn(message: string, context?: object | string) {\n        console.warn(`${new Date().toLocaleString()} [WARNING]: ${message}`, context || '');\n    }\n\n    /**\n     * Logs an error message to the console.\n     *\n     * @param message - The message to be logged.\n     * @param context - Optional additional context (object or string) to log alongside the message.\n     */\n    static error(message: string, context?: object | string) {\n        console.error(`${new Date().toLocaleString()} [ERROR]: ${message}`, context || '');\n    }\n\n    /**\n     * Logs a debug message to the console.\n     *\n     * @param message - The message to be logged.\n     * @param context - Optional additional context (object or string) to log alongside the message.\n     */\n    static debug(message: string, context?: object | string) {\n        console.debug(`${new Date().toLocaleString()} [DEBUG]: ${message}`, context || '');\n    }\n}","import { AtpAgent, AtpAgentOptions } from '@atproto/api';\nimport { CronJob } from 'cron';\nimport { Logger } from '../utils/logger';\nimport type { CronBot } from '../types/bot';\n\nexport class CronBotAgent extends AtpAgent {\n  public job: CronJob;\n\n  constructor(public opts: AtpAgentOptions, public cronBot: CronBot) {\n    super(opts);\n\n    this.job = new CronJob(\n      cronBot.cronJob.scheduleExpression,\n      async () => cronBot.action(this),\n      cronBot.cronJob.callback,\n      false,\n      cronBot.cronJob.timeZone,\n    );\n  }\n}\n\nexport const useCronBotAgent = async (cronBot: CronBot): Promise<CronBotAgent | null> => {\n  const agent = new CronBotAgent({ service: cronBot.service }, cronBot);\n  \n  try {\n    Logger.info(`Initialize cron bot ${cronBot.username ?? cronBot.identifier}`);\n    const login = await agent.login({ identifier: cronBot.identifier, password: cronBot.password! });\n    if (!login.success) {\n      Logger.info(`Failed to login cron bot ${cronBot.username ?? cronBot.identifier}`);\n      return null;\n    }\n    agent.job.start();\n    return agent;\n  } catch (error) {\n    Logger.error(\"Failed to initialize cron bot:\", `${error}, ${cronBot.username ?? cronBot.identifier}`);\n    return null;\n  }\n};","import { AtpAgent, AtpAgentOptions } from '@atproto/api';\nimport type { BotReply, KeywordBot } from '../types/bot';\nimport type { Post, UriCid } from \"../types/post\";\nimport { Logger } from '../utils/logger';\n\n\nexport class KeywordBotAgent extends AtpAgent {\n    constructor(public opts: AtpAgentOptions, public keywordBot: KeywordBot) {\n        super(opts);\n    }\n    \n    async likeAndReplyIfFollower(post: Post): Promise<void> {\n        if (post.authorDid === this.assertDid) {\n            return;\n        }\n\n        const replies = filterBotReplies(post.text, this.keywordBot.replies);\n        if (replies.length < 1) {\n            return;\n        }\n\n        try {\n            const actorProfile = await this.getProfile({actor: post.authorDid});\n\n            if(actorProfile.success) {\n                \n                if (!actorProfile.data.viewer?.followedBy) {\n                    return;\n                }\n\n                const replyCfg = replies[Math.floor(Math.random() * replies.length)];\n                const message = replyCfg.messages[Math.floor(Math.random() * replyCfg.messages.length)];\n                const reply = buildReplyToPost(\n                    { uri: post.rootUri, cid: post.rootCid },\n                    { uri: post.uri, cid: post.cid },\n                    message\n                );\n\n                await Promise.all([this.like(post.uri, post.cid), this.post(reply)]);\n                Logger.info(`Replied to post: ${post.uri}`, this.keywordBot.username ?? this.keywordBot.identifier);\n            }\n        } catch (error) {\n            Logger.error(\"Error while replying:\", `${error}, ${this.keywordBot.username ?? this.keywordBot.identifier}`);\n        }\n    }\n}\n\nexport function buildReplyToPost (root: UriCid, parent: UriCid, message: string) {    \n    return {\n        $type: \"app.bsky.feed.post\" as \"app.bsky.feed.post\",\n        text: message,\n        reply: {\n            \"root\": root,\n            \"parent\": parent\n        }\n    };\n}\n\nexport function filterBotReplies(text: string, botReplies: BotReply[]) {\n    return botReplies.filter(reply => {\n        const keyword = reply.keyword.toLowerCase();\n        const keywordFound = text.toLowerCase().includes(keyword);\n        if (!keywordFound) {\n            return false;\n        }\n\n        if (Array.isArray(reply.exclude) && reply.exclude.length > 0) {\n            for (const excludeWord of reply.exclude) {\n                if (text.toLowerCase().includes(excludeWord.toLowerCase())) {\n                    return false;\n                }\n            }\n        }\n\n        return true;\n    });\n}\n\nexport const useKeywordBotAgent = async (keywordBot: KeywordBot): Promise<KeywordBotAgent | null> => {\n    const agent = new KeywordBotAgent({ service: keywordBot.service }, keywordBot);\n\n    try {\n        const login = await agent.login({ identifier: keywordBot.identifier, password: keywordBot.password! });\n\n        Logger.info(`Initialize keyword bot ${keywordBot.username ?? keywordBot.identifier}`);\n\n        if (!login.success) { \n            Logger.warn(`Failed to login keyword bot ${keywordBot.username ?? keywordBot.identifier}`);\n            return null;\n        }\n\n        return agent;\n    } catch (error) {\n        Logger.error(\"Failed to initialize keyword bot:\", `${error}, ${keywordBot.username ?? keywordBot.identifier}`);\n        return null;\n    }\n};","import WebSocket from 'ws';\nimport { Logger } from './logger';\n\ninterface WebSocketClientOptions {\n    /** The URL of the WebSocket server to connect to. */\n    url: string;\n    /** The interval in milliseconds to wait before attempting to reconnect when the connection closes. Default is 5000ms. */\n    reconnectInterval?: number;\n    /** The interval in milliseconds for sending ping messages (heartbeats) to keep the connection alive. Default is 10000ms. */\n    pingInterval?: number;\n}\n\n/**\n * A WebSocket client that automatically attempts to reconnect upon disconnection\n * and periodically sends ping messages (heartbeats) to ensure the connection remains alive.\n * \n * Extend this class and override the protected `onOpen`, `onMessage`, `onError`, and `onClose` methods\n * to implement custom handling of WebSocket events.\n */\nexport class WebSocketClient {\n    private url: string;\n    private reconnectInterval: number;\n    private pingInterval: number;\n    private ws: WebSocket | null = null;\n    private pingTimeout: NodeJS.Timeout | null = null;\n\n    /**\n     * Creates a new instance of `WebSocketClient`.\n     * \n     * @param options - Configuration options for the WebSocket client, including URL, reconnect interval, and ping interval.\n     */\n    constructor(options: WebSocketClientOptions) {\n        this.url = options.url;\n        this.reconnectInterval = options.reconnectInterval || 5000;\n        this.pingInterval = options.pingInterval || 10000; \n        this.run();\n    }\n\n    /**\n     * Initiates a WebSocket connection to the specified URL.\n     * \n     * This method sets up event listeners for `open`, `message`, `error`, and `close` events.\n     * When the connection opens, it starts the heartbeat mechanism.\n     * On close, it attempts to reconnect after a specified interval.\n     */\n    private run() {\n        this.ws = new WebSocket(this.url);\n\n        this.ws.on('open', () => {\n            Logger.info('WebSocket connected');\n            this.startHeartbeat();\n            this.onOpen();\n        });\n\n        this.ws.on('message', (data: WebSocket.Data) => {\n            this.onMessage(data);\n        });\n\n        this.ws.on('error', (error) => {\n            Logger.error('WebSocket error:', error);\n            this.onError(error);\n        });\n\n        this.ws.on('close', () => {\n            Logger.info('WebSocket disconnected');\n            this.stopHeartbeat();\n            this.onClose();\n            this.reconnect();\n        });\n    }\n\n    /**\n     * Attempts to reconnect to the WebSocket server after the specified `reconnectInterval`.\n     * It clears all event listeners on the old WebSocket and initiates a new connection.\n     */\n    private reconnect() {\n        if (this.ws) {\n            this.ws.removeAllListeners();\n            this.ws = null;\n        }\n\n        setTimeout(() => this.run(), this.reconnectInterval);\n    }\n\n    /**\n     * Starts sending periodic ping messages to the server.\n     * \n     * This function uses `setInterval` to send a ping at the configured `pingInterval`.\n     * If the WebSocket is not open, pings are not sent.\n     */\n    private startHeartbeat() {\n        this.pingTimeout = setInterval(() => {\n            if (this.ws && this.ws.readyState === WebSocket.OPEN) {\n                this.ws.ping(); \n            }\n        }, this.pingInterval);\n    }\n\n    /**\n     * Stops sending heartbeat pings by clearing the ping interval.\n     */\n    private stopHeartbeat() {\n        if (this.pingTimeout) {\n            clearInterval(this.pingTimeout);\n            this.pingTimeout = null;\n        }\n    }\n\n    /**\n     * Called when the WebSocket connection is successfully opened.\n     * \n     * Override this method in a subclass to implement custom logic on connection.\n     */\n    protected onOpen() {\n        // Custom logic for connection open\n    }\n\n    /**\n     * Called when a WebSocket message is received.\n     * \n     * @param data - The data received from the WebSocket server.\n     * \n     * Override this method in a subclass to implement custom message handling.\n     */\n    protected onMessage(data: WebSocket.Data) {\n        // Custom logic for handling received messages\n    }\n\n    /**\n     * Called when a WebSocket error occurs.\n     * \n     * @param error - The error that occurred.\n     * \n     * Override this method in a subclass to implement custom error handling.\n     */\n    protected onError(error: Error) {\n        // Custom logic for handling errors\n    }\n\n    /**\n     * Called when the WebSocket connection is closed.\n     * \n     * Override this method in a subclass to implement custom logic on disconnection.\n     */\n    protected onClose() {\n        // Custom logic for handling connection close\n    }\n\n    /**\n     * Sends data to the connected WebSocket server, if the connection is open.\n     * \n     * @param data - The data to send.\n     */\n    public send(data: any) {\n        if (this.ws && this.ws.readyState === WebSocket.OPEN) {\n            this.ws.send(data);\n        }\n    }\n\n    /**\n     * Closes the WebSocket connection gracefully.\n     */\n    public close() {\n        if (this.ws) {\n            this.ws.close();\n        }\n    }\n}","import WebSocket from 'ws';\nimport { WebSocketClient } from './websocketClient';\nimport { Logger } from './logger';\n\n/**\n * Represents a subscription to a Jetstream feed over WebSocket.\n * \n * This class extends `WebSocketClient` to automatically handle reconnections and heartbeats.\n * It invokes a provided callback function whenever a message is received from the Jetstream server.\n */\nexport class JetstreamSubscription extends WebSocketClient {\n    /**\n     * Creates a new `JetstreamSubscription`.\n     * \n     * @param service - The URL of the Jetstream server to connect to.\n     * @param interval - The interval (in milliseconds) for reconnect attempts.\n     * @param onMessageCallback - An optional callback function that is invoked whenever a message is received from the server.\n     */\n    constructor(\n        public service: string,\n        public interval: number,\n        private onMessageCallback?: (data: WebSocket.Data) => void\n    ) {\n        super({url: service, reconnectInterval: interval});\n    }\n\n    /**\n     * Called when the WebSocket connection is successfully opened.\n     * Logs a message indicating that the connection to the Jetstream server has been established.\n     */\n    protected onOpen() {\n        Logger.info('Connected to Jetstream server.');\n    }\n\n    /**\n     * Called when a WebSocket message is received.\n     * \n     * If an `onMessageCallback` was provided, it is invoked with the received data.\n     * \n     * @param data - The data received from the Jetstream server.\n     */\n    protected onMessage(data: WebSocket.Data) {\n        if (this.onMessageCallback) {\n            this.onMessageCallback(data);\n        }\n    }\n\n    /**\n     * Called when a WebSocket error occurs.\n     * Logs the error message indicating that Jetstream encountered an error.\n     * \n     * @param error - The error that occurred.\n     */\n    protected onError(error: Error) {\n        Logger.error('Jetstream encountered an error:', error);\n    }\n\n    /**\n     * Called when the WebSocket connection is closed.\n     * Logs a message indicating that the Jetstream connection has closed.\n     */\n    protected onClose() {\n        Logger.info('Jetstream connection closed.');\n    }\n}\n","/**\n * Returns the given string if it is defined; otherwise returns `undefined`.\n * \n * @param val - The optional string value to check.\n * @returns The given string if defined, or `undefined` if `val` is falsy.\n */\nexport const maybeStr = (val?: string): string | undefined => {\n  if (!val) return undefined;\n  return val;\n}\n\n/**\n* Parses the given string as an integer if it is defined and a valid integer; otherwise returns `undefined`.\n* \n* @param val - The optional string value to parse.\n* @returns The parsed integer if successful, or `undefined` if the string is falsy or not a valid integer.\n*/\nexport const maybeInt = (val?: string): number | undefined => {\n  if (!val) return undefined;\n  const int = parseInt(val, 10);\n  if (isNaN(int)) return undefined;\n  return int;\n}","import WebSocket from 'ws';\nimport { Post } from \"../types/post\";\nimport { WebsocketMessage } from '../types/message';\n;\n\n/**\n * Converts a raw WebSocket message into a `FeedEntry` object, if possible.\n * \n * This function checks if the incoming WebSocket data is structured like a feed commit message\n * with the required properties for a created post. If the data matches the expected shape,\n * it extracts and returns a `FeedEntry` object. Otherwise, it returns `null`.\n * \n * @param data - The raw WebSocket data.\n * @returns A `FeedEntry` object if the data represents a newly created post, otherwise `null`.\n */\nexport function websocketToFeedEntry(data: WebSocket.Data): Post | null {\n    const message = data as WebsocketMessage;\n    if(!message.commit || !message.commit.record || !message.commit.record['$type'] || !message.did || !message.commit.cid || !message.commit.rkey || message.commit.operation !== \"create\") {\n        return null;\n    }\n    const messageUri = `at://${message.did}/${message.commit.record['$type']}/${message.commit.rkey}`;\n    return {\n        cid: message.commit.cid,\n        uri: messageUri,\n        authorDid: message.did,\n        text: message.commit.record.text,\n        rootCid: message.commit.record.reply?.root.cid ?? message.commit.cid,\n        rootUri: message.commit.record.reply?.root.uri ?? messageUri,\n    };\n}"],"mappings":"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","names":["import_api","import_api","WebSocket"]}